C51 COMPILER V9.60.0.0   GPIO                                                              09/01/2021 23:52:44 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE GPIO
OBJECT MODULE PLACED IN .\Output\gpio.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\Library\StdDriver\src\gpio.c OPTIMIZE(7,SPEED) BROWSE INCDIR(..\Libra
                    -ry\Device\Include;..\Library\StdDriver\inc) DEBUG OBJECTEXTEND PRINT(.\List\gpio.lst) TABS(2) OBJECT(.\Output\gpio.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2020 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Website: http://www.nuvoton.com
   9          //  E-Mail : MicroC-8bit@nuvoton.com
  10          //********************************************************************************************************
             -***
  11          
  12          #include "ML51.h"
  13          
  14           /**
  15            * @brief GPIO Pull up or Pull down enable setting
  16            * @param[in] u8Port Decides the GPIO port number Port0 ~ Port5
  17            * @param[in] u8PinMask Decides  bit of the port (SET_BIT0~SET_BIT7 use "|" to define multi bit).
  18            * @param[in] u8PullMode Decides the GPIO Pull up or pull down (PullUp/PullDown)
  19            * @return  None
  20            * @note none
  21            * @exmaple :   GPIO_Pull_Enable(P1,BIT0|BIT5|BIT7,PullUp);
  22            */
  23          void GPIO_Pull_Enable(unsigned char u8Port, unsigned char u8PinMask, unsigned char u8PullMode)
  24          {
  25   1        SFRS=1;
  26   1        switch (u8PullMode)
  27   1        {
  28   2          case PULLUP:
  29   2              switch(u8Port)
  30   2              {
  31   3                case Port0:  P0UP |= u8PinMask;  break;
  32   3                case Port1:  P1UP |= u8PinMask;  break;
  33   3                case Port2:  P2UP |= u8PinMask;  break;
  34   3                case Port3:  P3UP |= u8PinMask;  break;
  35   3                case Port4:  P4UP |= u8PinMask;  break;
  36   3                case Port5:  P5UP |= u8PinMask;  break;
  37   3                case Port6:  P6UP |= u8PinMask;  break;
  38   3              }
  39   2          break;
  40   2          case PULLDOWN:
  41   2              switch(u8Port)
  42   2              {
  43   3                case Port0:  P0DW |= u8PinMask;  break;
  44   3                case Port1:  P1DW |= u8PinMask;  break;
  45   3                case Port2:  P2DW |= u8PinMask;  break;
  46   3                case Port3:  P3DW |= u8PinMask;  break;
  47   3                case Port4:  P4DW |= u8PinMask;  break;
C51 COMPILER V9.60.0.0   GPIO                                                              09/01/2021 23:52:44 PAGE 2   

  48   3                case Port5:  P5DW |= u8PinMask;  break;
  49   3                case Port6:  P6DW |= u8PinMask;  break;
  50   3              }
  51   2          break;
  52   2          }
  53   1      }
  54          
  55          
  56           /**
  57            * @brief GPIO Pull up or Pull down disable 
  58            * @param[in] u8Port Decides the GPIO port number Port0 ~ Port5
  59            * @param[in] u8PinMask Decides  bit of the port (SET_BIT0~SET_BIT7 use "|" to define multi bit).
  60            * @param[in] u8PullMode Decides the GPIO Pull up or pull down (PullUp/PullDown)
  61            * @return  None
  62            * @note none
  63            * @exmaple :   GPIO_Pull_Enable(P1,BIT0|BIT5,PullUp);
  64            */
  65          void GPIO_Pull_Disable(unsigned char u8Port, unsigned char u8PinMask, unsigned char u8PullMode)
  66          {
  67   1        SFRS=1;
  68   1        switch (u8PullMode)
  69   1        {
  70   2          case PULLUP:
  71   2              switch(u8Port)
  72   2              {
  73   3                case Port0:  P0UP &= ~u8PinMask;  break;
  74   3                case Port1:  P1UP &= ~u8PinMask;  break;
  75   3                case Port2:  P2UP &= ~u8PinMask;  break;
  76   3                case Port3:  P3UP &= ~u8PinMask;  break;
  77   3                case Port4:  P4UP &= ~u8PinMask;  break;
  78   3                case Port5:  P5UP &= ~u8PinMask;  break;
  79   3                case Port6:  P6UP &= ~u8PinMask;  break;
  80   3              }
  81   2          break;
  82   2          case PULLDOWN:
  83   2              switch(u8Port)
  84   2              {
  85   3                case Port0:  P0DW &= ~u8PinMask;  break;
  86   3                case Port1:  P1DW &= ~u8PinMask;  break;
  87   3                case Port2:  P2DW &= ~u8PinMask;  break;
  88   3                case Port3:  P3DW &= ~u8PinMask;  break;
  89   3                case Port4:  P4DW &= ~u8PinMask;  break;
  90   3                case Port5:  P5DW &= ~u8PinMask;  break;
  91   3                case Port6:  P6DW &= ~u8PinMask;  break;
  92   3              }
  93   2          break;
  94   2          }
  95   1      }
  96          
  97          
  98           /**
  99            * @brief GPIO mode setting
 100            * @param[in] u8Port Decides the GPIO port number Port0 ~ Port5
 101            * @param[in] u8PinMask Decides  bit of the port ( from SET_BIT0~SET_BIT7 use "|" to define multi bit)
 102            * @param[in] u8Mode Decides the GPIO mode GPIO_MODE_INPUT / GPIO_MODE_PUSHPULL / GPIO_MODE_QUASI / GPIO_
             -MODE_OPENDRAI for mode to select.
 103            * @return  None
 104            * @note Confirm multi function pin is defined as GPIO first. call function_define_ML51.h to define.
 105            * @exmaple :   GPIO_SetMode(Port1,BIT0|BIT7,GPIO_MODE_QUASI);
 106            */
 107          void GPIO_SetMode(unsigned char u8Port, unsigned char u8PinMask, unsigned char u8Mode)
 108          {
C51 COMPILER V9.60.0.0   GPIO                                                              09/01/2021 23:52:44 PAGE 3   

 109   1          unsigned char u8PnM1, u8PnM2;
 110   1      
 111   1          SFRS = 1;
 112   1          switch(u8Port)
 113   1          {
 114   2              case Port0:  u8PnM1 = P0M1;  u8PnM2 = P0M2;  break;
 115   2              case Port1:  u8PnM1 = P1M1;  u8PnM2 = P1M2;  break;
 116   2              case Port2:  u8PnM1 = P2M1;  u8PnM2 = P2M2;  break;
 117   2              case Port3:  u8PnM1 = P3M1;  u8PnM2 = P3M2;  break;
 118   2              case Port4:  u8PnM1 = P4M1;  u8PnM2 = P4M2;  break;
 119   2              case Port5:  u8PnM1 = P5M1;  u8PnM2 = P5M2;  break;
 120   2              case Port6:  u8PnM1 = P6M1;  u8PnM2 = P6M2;  break;
 121   2          }
 122   1          switch(u8Mode)
 123   1          {
 124   2              case GPIO_MODE_QUASI:
 125   2                  u8PnM1 &= ~u8PinMask;
 126   2                  u8PnM2 &= ~u8PinMask;
 127   2                  break;
 128   2              case GPIO_MODE_PUSHPULL:
 129   2                  u8PnM1 &= ~u8PinMask;
 130   2                  u8PnM2 |= u8PinMask;
 131   2                  break;
 132   2              case GPIO_MODE_INPUT:
 133   2                  u8PnM1 |= u8PinMask; 
 134   2                  u8PnM2 &= ~u8PinMask;
 135   2                  break;
 136   2              case GPIO_MODE_OPENDRAIN:
 137   2                  u8PnM1 |= u8PinMask;
 138   2                  u8PnM2 |= u8PinMask;
 139   2                  break;
 140   2          }
 141   1          switch(u8Port)
 142   1          {
 143   2              case Port0:  P0M1 = u8PnM1;  P0M2 = u8PnM2;  break;
 144   2              case Port1:  P1M1 = u8PnM1;  P1M2 = u8PnM2;  break;
 145   2              case Port2:  P2M1 = u8PnM1;  P2M2 = u8PnM2;  break;
 146   2              case Port3:  P3M1 = u8PnM1;  P3M2 = u8PnM2;  break;
 147   2              case Port4:  P4M1 = u8PnM1;  P4M2 = u8PnM2;  break;
 148   2              case Port5:  P5M1 = u8PnM1;  P5M2 = u8PnM2;  break;
 149   2              case Port6:  P6M1 = u8PnM1;  P6M2 = u8PnM2;  break;
 150   2          }
 151   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    488    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
